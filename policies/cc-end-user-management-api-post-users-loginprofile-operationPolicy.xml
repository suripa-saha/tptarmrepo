<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<base />
		<set-variable name="emails" value="@(context.Request.Headers["Authorization"].First().Split(' ')[1].AsJwt()?.Claims["emails"].FirstOrDefault())" />
		<set-variable name="given_name" value="@(context.Request.Headers["Authorization"].First().Split(' ')[1].AsJwt()?.Claims["given_name"].FirstOrDefault())" />
		<set-variable name="family_name" value="@(context.Request.Headers["Authorization"].First().Split(' ')[1].AsJwt()?.Claims["family_name"].FirstOrDefault())" />
		<set-variable name="CompanyFullName" value="@(context.Request.Headers["Authorization"].First().Split(' ')[1].AsJwt()?.Claims["name"].FirstOrDefault())" />
		<set-variable name="extension_CompanyName" value="@(context.Request.Headers["Authorization"].First().Split(' ')[1].AsJwt()?.Claims["extension_CompanyName"].FirstOrDefault())" />
		<choose>
			<when condition="@((bool)context.Request.Headers["Authorization"].First().Split(' ')[1].AsJwt()?.Claims.ContainsKey("idp"))">
				<set-variable name="idp_source" value="@(context.Request.Headers["Authorization"].First().Split(' ')[1].AsJwt()?.Claims["idp"].FirstOrDefault())" />
			</when>
			<otherwise>
				<set-variable name="idp_source" value="Azure Active Directory" />
			</otherwise>
		</choose>
		<set-header name="Content-Type" exists-action="override">
			<value>application/json</value>
		</set-header>
		<set-header name="x-request-context-data" exists-action="override">
			<value>@((string)context.Variables.GetValueOrDefault("emails"))</value>
			<value>@((string)context.Request.IpAddress)</value>
			<value>@((string)context.Variables.GetValueOrDefault("idp_source"))</value>
		</set-header>
		<set-body template="liquid">
                {
                    "firstName"     :   "{{context.Variables["given_name"]}}",
                    "lastName"      :   "{{context.Variables["family_name"]}}",
                    "userEmail"     :   "{{context.Variables["emails"]}}",
                    "companyName"   :   "{{context.Variables["extension_CompanyName"]}}"
                }
            </set-body>
		<set-backend-service base-url="http://102.133.194.87:8080/tpt/cargoconnect/v1" />
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>